version: 2.1

jobs:
  test-csm:
    docker:
      - image: cimg/python:3.10  # Official Python 3.10 image
    working_directory: ~/repo
    steps:
      - checkout

      - run:
          name: Debug Environment
          command: |
            echo "Python version:" && python --version
            echo "Python location:" && which python
            echo "Current directory:" && pwd
            echo "Directory contents:" && ls -la

      - run:
          name: Install System Dependencies
          command: |
            sudo apt-get update && sudo apt-get install -y ffmpeg
            echo "✅ System dependencies installed."

      - run:
          name: Install Dependencies
          command: |
            set -x  # Enable verbose mode
            python3 -m venv .venv
            echo "✅ Virtual environment created."
            source .venv/bin/activate
            echo "Python executable in use: $(which python)"
            echo "✅ Virtual environment activated."
            pip install --upgrade pip
            pip list  # Show initial packages
            echo "Installing requirements..."
            pip install -r requirements.txt
            echo "Installing huggingface_hub..."
            pip install --verbose huggingface_hub
            pip list  # Show installed packages
            echo "✅ Dependencies installed."

      - run:
          name: Verify Python Paths
          command: |
            source .venv/bin/activate
            echo "Python path:" && python -c "import sys; print(sys.path)"
            echo "Python executable:" && python -c "import sys; print(sys.executable)"

      - run:
          name: Verify Hugging Face CLI Installation
          command: |
            source .venv/bin/activate
            python -c "import huggingface_hub; print('huggingface_hub version:', huggingface_hub.__version__)"
            python -c "import huggingface_hub; print('huggingface_hub path:', huggingface_hub.__file__)"
            echo "Listing huggingface_hub contents:" && python -c "import huggingface_hub; print(dir(huggingface_hub))"

      - run:
          name: Debug HUGGINGFACE_TOKEN
          command: |
            echo "Checking HUGGINGFACE_TOKEN..."
            if [ -z "$HUGGINGFACE_TOKEN" ]; then
              echo "HUGGINGFACE_TOKEN is not set!";
            else
              echo "HUGGINGFACE_TOKEN is set with length: ${#HUGGINGFACE_TOKEN}";
            fi

      - run:
          name: Log in to Hugging Face (Verbose)
          command: |
            source .venv/bin/activate
            echo "Logging in to Hugging Face using API method..."
            # Enable debug logging and print the token length (do not print the token itself)
            python -c "import logging; logging.basicConfig(level=logging.DEBUG); import os; print('DEBUG: HUGGINGFACE_TOKEN length:', len(os.environ.get('HUGGINGFACE_TOKEN',''))); from huggingface_hub import login; login(token=os.environ.get('HUGGINGFACE_TOKEN')); print('✅ Hugging Face login successful.')"

      - run:
          name: Debug Generator Module
          command: |
            source .venv/bin/activate
            echo "Examining generator.py..."
            cat generator.py
            echo "Checking Model class implementation..."
            python -c "import inspect; from generator import Model; print('Model class __init__ signature:', inspect.signature(Model.__init__)); print('Model class from_pretrained signature:', inspect.signature(Model.from_pretrained)); from generator import load_csm_1b; print('load_csm_1b signature:', inspect.signature(load_csm_1b))"

      - run:
          name: Write Python Test Script
          command: |
            source .venv/bin/activate
            echo "try:" > run_test.py
            echo "    from generator import load_csm_1b, Model" >> run_test.py
            echo "    import torchaudio, torch" >> run_test.py
            echo "    import json, os" >> run_test.py
            echo "    print('Modules imported successfully')" >> run_test.py
            echo "    device = 'cuda' if torch.cuda.is_available() else 'cpu'" >> run_test.py
            echo "    print(f'Using device: {device}')" >> run_test.py
            echo "    print('Checking if model config exists...')" >> run_test.py
            echo "    from huggingface_hub import hf_hub_download" >> run_test.py
            echo "    try:" >> run_test.py
            echo "        config_path = hf_hub_download('sesame/csm-1b', 'config.json')" >> run_test.py
            echo "        with open(config_path, 'r') as f:" >> run_test.py
            echo "            config = json.load(f)" >> run_test.py
            echo "        print('Config loaded successfully')" >> run_test.py
            echo "    except Exception as e:" >> run_test.py
            echo "        print(f'Error loading config: {e}')" >> run_test.py
            echo "        config = None" >> run_test.py
            echo "    print('Attempting to load model...')" >> run_test.py
            echo "    generator = load_csm_1b(device=device)" >> run_test.py
            echo "    print('Model loaded successfully')" >> run_test.py
            echo "    audio = generator.generate(" >> run_test.py
            echo "        text='Are you coming, or am I just waiting here forever?', " >> run_test.py
            echo "        speaker=0," >> run_test.py
            echo "        context=[], " >> run_test.py
            echo "        max_audio_length_ms=10000" >> run_test.py
            echo "    )" >> run_test.py
            echo "    print('Audio generated successfully')" >> run_test.py
            echo "    import torchaudio" >> run_test.py
            echo "    torchaudio.save('test_output.wav', audio.unsqueeze(0).cpu(), generator.sample_rate)" >> run_test.py
            echo "    print('✅ Test completed successfully!')" >> run_test.py
            echo "except Exception as e:" >> run_test.py
            echo "    import traceback" >> run_test.py
            echo "    print(f'Error during test: {e}')" >> run_test.py
            echo "    traceback.print_exc()" >> run_test.py
            echo "    exit(1)" >> run_test.py

      - run:
          name: Run Basic Speech Generation Test
          command: |
            source .venv/bin/activate
            echo "Python and torch versions:"
            python -c "import sys, torch; print(f'Python: {sys.version}'); print(f'PyTorch: {torch.__version__}')"
            echo "Starting test execution..."
            python run_test.py

      - store_artifacts:
          name: Generated Audio File
          path: test_output.wav

      - store_artifacts:
          name: generator.py File
          path: generator.py

      - run:
          name: Cleanup
          command: rm -rf .venv

workflows:
  version: 2
  test_csm_workflow:
    jobs:
      - test-csm
