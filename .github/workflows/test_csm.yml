name: Test CSM Model
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
jobs:
  test-csm:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Debug environment
        run: |
          echo "Python version:"
          python --version
          echo "Python location:"
          which python
          echo "Current directory:"
          pwd
          echo "Directory contents:"
          ls -la
      
      - name: Install dependencies
        run: |
          set -x  # Enable verbose mode
          python3 -m venv .venv
          echo "✅ Virtual environment created."
          source .venv/bin/activate
          echo "Python executable in use: $(which python)"
          echo "✅ Virtual environment activated."
          pip install --upgrade pip
          pip list  # Show initial packages
          echo "Installing requirements..."
          pip install -r requirements.txt
          echo "Installing huggingface_hub..."
          pip install --verbose huggingface_hub
          pip list  # Show installed packages
          echo "✅ Dependencies installed."
      
      - name: Verify Python paths
        run: |
          source .venv/bin/activate
          echo "Python path:"
          python -c "import sys; print(sys.path)"
          echo "Python executable:"
          python -c "import sys; print(sys.executable)"
      
      - name: Verify Hugging Face CLI installation
        run: |
          source .venv/bin/activate
          python -c "import huggingface_hub; print('huggingface_hub version:', huggingface_hub.__version__)"
          python -c "import huggingface_hub; print('huggingface_hub path:', huggingface_hub.__file__)"
          echo "Checking CLI module..."
          python -c "from huggingface_hub import cli; print('✅ Hugging Face Hub CLI is available')"
          pip show huggingface_hub
      
      - name: Log in to Hugging Face
        env:
          HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
        run: |
          set -x  # Enable verbose mode
          source .venv/bin/activate
          echo "Attempting login via Python API first..."
          python -c "
          from huggingface_hub import login
          login(token='$HUGGINGFACE_TOKEN')
          print('✅ Hugging Face login via API successful.')
          "
          echo "Now attempting CLI login method..."
          python -m huggingface_hub.cli login --token $HUGGINGFACE_TOKEN
          echo "✅ Hugging Face login successful."
      
      - name: Run basic speech generation test
        run: |
          source .venv/bin/activate
          echo "Python and torch versions:"
          python -c "import sys, torch; print(f'Python: {sys.version}'); print(f'PyTorch: {torch.__version__}')"
          echo "Starting generation test..."
          python -c "
          from generator import load_csm_1b
          import torchaudio, torch
          print('Modules imported successfully')
          device = 'cuda' if torch.cuda.is_available() else 'cpu'
          print(f'Using device: {device}')
          generator = load_csm_1b(device=device)
          print('Model loaded successfully')
          audio = generator.generate(text='Hello, this is a test.', speaker=0, context=[], max_audio_length_ms=5000)
          print('Audio generated successfully')
          torchaudio.save('test_output.wav', audio.unsqueeze(0).cpu(), generator.sample_rate)
          print('✅ Test completed successfully!')
          "
      
      - name: Upload generated audio file
        uses: actions/upload-artifact@v4
        with:
          name: generated-audio
          path: test_output.wav
      
      - name: Cleanup
        run: rm -rf .venv
